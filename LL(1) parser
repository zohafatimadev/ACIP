{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyODlY2Bfk1Fd/5Y5eg5/3Gw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zohafatimadev/ACIP/blob/main/LL(1)%20parser\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "I’m not from tabulate import tabulate\n",
        "\n",
        "# Define the grammar productions\n",
        "productions = {\n",
        "    'E': ['TA'],\n",
        "    'A': ['+TA', ''],\n",
        "    'T': ['FB'],\n",
        "    'B': ['*FB', ''],\n",
        "    'F': ['t', '(E)'],\n",
        "}\n",
        "\n",
        "# Define the terminals and non-terminals\n",
        "terminals = {'t', '+', '*', '(', ')', '$'}\n",
        "non_terminals = {'E', 'A', 'T', 'B', 'F'}\n",
        "\n",
        "# Initialize the parse table\n",
        "parse_table = {}\n",
        "\n",
        "# Fill in the parse table\n",
        "for non_terminal in non_terminals:\n",
        "    parse_table[non_terminal] = {}\n",
        "    for terminal in terminals:\n",
        "        parse_table[non_terminal][terminal] = ''\n",
        "\n",
        "# Calculate First sets\n",
        "def first(symbol):\n",
        "    if symbol in terminals:\n",
        "        return {symbol}\n",
        "    elif symbol in non_terminals:\n",
        "        return first_set[symbol]\n",
        "\n",
        "first_set = {}\n",
        "for non_terminal in non_terminals:\n",
        "    first_set[non_terminal] = set()\n",
        "\n",
        "while True:\n",
        "    updated = False\n",
        "    for non_terminal in non_terminals:\n",
        "        for production in productions[non_terminal]:\n",
        "            for symbol in production:\n",
        "                if symbol in terminals:\n",
        "                    if symbol not in first_set[non_terminal]:\n",
        "                        first_set[non_terminal].add(symbol)\n",
        "                        updated = True\n",
        "                    break\n",
        "                else:\n",
        "                    old_size = len(first_set[non_terminal])\n",
        "                    first_set[non_terminal] = first_set[non_terminal].union(first(symbol))\n",
        "                    if old_size != len(first_set[non_terminal]):\n",
        "                        updated = True\n",
        "                    if 'ε' not in first_set[symbol]:\n",
        "                        break\n",
        "            else:\n",
        "                if 'ε' not in first_set[non_terminal]:\n",
        "                    first_set[non_terminal].add('ε')\n",
        "                    updated = True\n",
        "    if not updated:\n",
        "        break\n",
        "\n",
        "# Calculate Follow sets\n",
        "follow_set = {}\n",
        "for non_terminal in non_terminals:\n",
        "    follow_set[non_terminal] = set()\n",
        "\n",
        "follow_set['E'].add('$')\n",
        "\n",
        "while True:\n",
        "    updated = False\n",
        "    for non_terminal in non_terminals:\n",
        "        for production in productions[non_terminal]:\n",
        "            for i, symbol in enumerate(production):\n",
        "                if symbol in non_terminals:\n",
        "                    for j in range(i+1, len(production)):\n",
        "                        if production[j] in terminals:\n",
        "                            if production[j] not in follow_set[symbol]:\n",
        "                                follow_set[symbol].add(production[j])\n",
        "                                updated = True\n",
        "                            break\n",
        "                        else:\n",
        "                            old_size = len(follow_set[symbol])\n",
        "                            follow_set[symbol] = follow_set[symbol].union(first(production[j]) - {'ε'})\n",
        "                            if old_size != len(follow_set[symbol]):\n",
        "                                updated = True\n",
        "                            if 'ε' not in first(production[j]):\n",
        "                                break\n",
        "                    else:\n",
        "                        if non_terminal != symbol:\n",
        "                            old_size = len(follow_set[symbol])\n",
        "                            follow_set[symbol] = follow_set[symbol].union(follow_set[non_terminal])\n",
        "                            if old_size != len(follow_set[symbol]):\n",
        "                                updated = True\n",
        "    if not updated:\n",
        "        break\n",
        "\n",
        "# Fill in the parse table\n",
        "for non_terminal in non_terminals:\n",
        "    for production in productions[non_terminal]:\n",
        "        if production == '':\n",
        "            continue\n",
        "        for terminal in first(production[0]) - {'ε'}:\n",
        "            parse_table[non_terminal][terminal] = production\n",
        "        if 'ε' in first(production[0]) or len(production) == 0:\n",
        "            for terminal in follow_set[non_terminal]:\n",
        "                parse_table[non_terminal][terminal] = production\n",
        "\n",
        "# Display the parse table\n",
        "table_headers = [''] + list(terminals)\n",
        "table_data = []\n",
        "for non_terminal in non_terminals:\n",
        "    table_row = [non_terminal]\n",
        "    for terminal in terminals:\n",
        "        table_row.append(parse_table[non_terminal][terminal])\n",
        "    table_data.append(table_row)\n",
        "\n",
        "print(tabulate(table_data, headers=table_headers, tablefmt=\"grid\"))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cnrR0lg9rpWw",
        "outputId": "89208d9e-ac0f-4c76-9df5-47c0f9ec48fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "+----+-----+-----+-----+-----+-----+-----+\n",
            "|    | t   | $   | +   | *   | (   | )   |\n",
            "+====+=====+=====+=====+=====+=====+=====+\n",
            "| E  | TA  |     |     |     | TA  |     |\n",
            "+----+-----+-----+-----+-----+-----+-----+\n",
            "| T  | FB  |     |     |     | FB  |     |\n",
            "+----+-----+-----+-----+-----+-----+-----+\n",
            "| B  |     |     |     | *FB |     |     |\n",
            "+----+-----+-----+-----+-----+-----+-----+\n",
            "| F  | t   |     |     |     | (E) |     |\n",
            "+----+-----+-----+-----+-----+-----+-----+\n",
            "| A  |     |     | +TA |     |     |     |\n",
            "+----+-----+-----+-----+-----+-----+-----+\n"
          ]
        }
      ]
    }
  ]
}